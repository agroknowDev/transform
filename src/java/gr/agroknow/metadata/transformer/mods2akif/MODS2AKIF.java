/* The following code was generated by JFlex 1.4.1 on 3/15/13 11:59 AM */

package gr.agroknow.metadata.transformer.mods2akif;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import gr.agroknow.metadata.akif.*;

import net.zettadata.generator.tools.Toolbox;
import net.zettadata.generator.tools.ToolboxException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/15/13 11:59 AM from the specification file
 * <tt>/Users/dmssrt/home/projects/agroKnow/code/mods2akif/src/conf/mods2akif.jflex</tt>
 */
class MODS2AKIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int MODS = 1;
  public static final int CONTRIBUTOR = 2;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\24\25\0\1\6\1\0\1\36\14\0\1\13\1\40\2\0"+
    "\1\37\2\0\1\41\3\0\1\17\1\0\1\1\1\12\1\14\2\0"+
    "\1\43\1\0\1\42\12\0\1\30\1\0\1\45\1\0\1\44\1\0"+
    "\1\33\14\0\1\20\1\21\1\23\1\16\1\3\1\27\1\31\1\34"+
    "\1\26\2\0\1\10\1\2\1\11\1\15\1\25\1\0\1\22\1\5"+
    "\1\4\1\32\2\0\1\7\1\35\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\44\0\1\2\54\0\1\3\7\0\1\4"+
    "\11\0\1\5\165\0\1\6\1\7\53\0\1\10\3\0"+
    "\1\11\47\0\1\12\20\0\1\13\10\0\1\14\30\0"+
    "\1\15\14\0\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\162\0\u0662\0\u0688\0\u06ae\0\u06d4"+
    "\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804"+
    "\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94"+
    "\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4"+
    "\0\162\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce"+
    "\0\162\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\162\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112"+
    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372"+
    "\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2"+
    "\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2"+
    "\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702"+
    "\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832"+
    "\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962"+
    "\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u1a92"+
    "\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2"+
    "\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2"+
    "\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22"+
    "\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52"+
    "\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082"+
    "\0\u0f4a\0\u0f70\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166"+
    "\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u2270\0\u2296"+
    "\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6"+
    "\0\u23ec\0\u2412\0\u2438\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6"+
    "\0\u251c\0\u2542\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600\0\u2626"+
    "\0\u264c\0\u2672\0\u2698\0\u26be\0\u26e4\0\u13be\0\u270a\0\u2730"+
    "\0\u2756\0\u1456\0\u277c\0\u27a2\0\u27c8\0\u27ee\0\u2814\0\u283a"+
    "\0\u2860\0\u2886\0\u28ac\0\u28d2\0\u28f8\0\u291e\0\u2944\0\u296a"+
    "\0\u2990\0\u29b6\0\u29dc\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u2a9a"+
    "\0\u2ac0\0\u2ae6\0\u2b0c\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4\0\u2bca"+
    "\0\u2bf0\0\u2c16\0\u2c3c\0\u2c62\0\u2c88\0\u2cae\0\u2cd4\0\u2cfa"+
    "\0\u2d20\0\u1988\0\u2d46\0\u2d6c\0\u2d92\0\u2db8\0\u2dde\0\u2e04"+
    "\0\u2e2a\0\u2e50\0\u2e76\0\u2e9c\0\u2ec2\0\u2ee8\0\u2f0e\0\u2f34"+
    "\0\u2f5a\0\u2f80\0\u23a0\0\u2fa6\0\u2fcc\0\u2ff2\0\u3018\0\u303e"+
    "\0\u3064\0\u308a\0\u30b0\0\u2438\0\u30d6\0\u30fc\0\u3122\0\u3148"+
    "\0\u316e\0\u3194\0\u31ba\0\u31e0\0\u3206\0\u322c\0\u3252\0\u3278"+
    "\0\u329e\0\u32c4\0\u32ea\0\u3310\0\u3336\0\u335c\0\u3382\0\u33a8"+
    "\0\u33ce\0\u33f4\0\u341a\0\u3440\0\u2cd4\0\u3466\0\u348c\0\u34b2"+
    "\0\u34d8\0\u34fe\0\u3524\0\u354a\0\u3570\0\u3596\0\u35bc\0\u35e2"+
    "\0\u3608\0\u3148";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\45\4\1\6\45\4\1\7\44\4\50\0"+
    "\1\10\45\0\1\11\10\0\1\12\11\0\1\13\22\0"+
    "\1\14\10\0\1\15\35\0\1\16\57\0\1\17\32\0"+
    "\1\20\65\0\1\21\40\0\1\22\32\0\1\23\47\0"+
    "\1\24\57\0\1\25\32\0\1\26\45\0\1\27\60\0"+
    "\1\30\44\0\1\31\35\0\1\32\45\0\1\33\44\0"+
    "\1\34\43\0\1\35\50\0\1\36\56\0\1\37\35\0"+
    "\1\40\56\0\1\41\33\0\1\42\66\0\1\43\36\0"+
    "\1\44\33\0\1\45\47\0\1\46\42\0\1\47\3\0"+
    "\1\50\1\51\6\0\1\52\5\0\1\53\33\0\1\54"+
    "\36\0\1\55\51\0\1\56\10\0\1\57\42\0\1\60"+
    "\30\0\1\61\60\0\1\62\10\0\1\63\37\0\1\64"+
    "\45\0\1\65\46\0\1\66\1\0\1\67\40\0\1\70"+
    "\46\0\1\71\46\0\1\72\42\0\1\73\41\0\1\74"+
    "\44\0\1\75\62\0\1\76\24\0\1\77\52\0\1\100"+
    "\36\0\1\101\50\0\1\102\63\0\1\103\25\0\1\104"+
    "\71\0\1\105\20\0\1\106\53\0\1\107\55\0\1\110"+
    "\36\0\1\111\62\0\1\112\27\0\1\113\66\0\1\114"+
    "\17\0\1\115\46\0\1\116\44\0\1\117\53\0\1\120"+
    "\51\0\1\121\33\0\1\122\45\0\1\123\44\0\1\124"+
    "\50\0\1\125\63\0\1\126\25\0\1\127\74\0\1\130"+
    "\27\0\1\131\53\0\1\132\30\0\1\133\44\0\1\134"+
    "\63\0\1\135\70\0\1\136\33\0\1\137\15\0\1\140"+
    "\54\0\1\141\47\0\1\142\45\0\1\143\51\0\1\144"+
    "\45\0\1\145\32\0\1\146\66\0\1\147\21\0\1\150"+
    "\63\0\1\151\30\0\1\152\56\0\1\153\31\0\24\154"+
    "\1\0\21\154\24\155\1\0\21\155\31\0\1\156\37\0"+
    "\1\157\64\0\1\160\32\0\1\161\36\0\1\162\47\0"+
    "\1\163\45\0\1\164\23\0\1\154\1\165\22\154\1\0"+
    "\21\154\1\155\1\166\22\155\1\0\21\155\3\0\1\167"+
    "\46\0\1\170\56\0\1\171\56\0\1\172\23\0\1\173"+
    "\45\0\1\174\43\0\1\175\43\0\1\154\1\165\11\154"+
    "\1\176\10\154\1\0\21\154\1\155\1\166\11\155\1\177"+
    "\10\155\1\0\21\155\33\0\1\200\26\0\1\201\42\0"+
    "\1\202\37\0\1\203\72\0\1\204\31\0\1\205\37\0"+
    "\1\206\37\0\1\154\1\165\1\207\21\154\1\0\21\154"+
    "\1\155\1\166\1\210\21\155\1\0\21\155\3\0\1\211"+
    "\42\0\24\212\1\0\21\212\16\0\1\213\51\0\1\214"+
    "\43\0\1\215\25\0\24\216\1\0\21\216\4\0\1\217"+
    "\41\0\1\154\1\165\13\154\1\220\6\154\1\0\21\154"+
    "\1\155\1\166\13\155\1\221\6\155\1\0\21\155\22\0"+
    "\1\222\23\0\1\212\1\223\22\212\1\0\21\212\26\0"+
    "\1\224\25\0\1\225\41\0\1\226\43\0\1\216\1\227"+
    "\22\216\1\0\21\216\35\0\1\230\10\0\1\154\1\165"+
    "\14\154\1\231\5\154\1\0\21\154\1\155\1\166\14\155"+
    "\1\232\5\155\1\0\21\155\2\0\1\233\43\0\1\212"+
    "\1\223\11\212\1\234\10\212\1\0\21\212\4\0\1\235"+
    "\45\0\1\236\44\0\1\237\42\0\1\216\1\227\11\216"+
    "\1\240\10\216\1\0\21\216\25\0\1\241\20\0\1\154"+
    "\1\165\3\154\1\242\16\154\1\0\21\154\1\155\1\166"+
    "\3\155\1\243\16\155\1\0\21\155\6\0\1\244\37\0"+
    "\1\212\1\223\1\245\21\212\1\0\21\212\26\0\1\246"+
    "\54\0\1\247\24\0\1\250\31\0\1\216\1\227\1\251"+
    "\21\216\1\0\21\216\3\0\1\252\42\0\1\154\1\165"+
    "\15\154\1\253\4\154\1\0\21\154\1\155\1\166\15\155"+
    "\1\254\4\155\1\0\21\155\20\0\1\255\25\0\1\212"+
    "\1\223\13\212\1\256\6\212\1\0\21\212\15\0\1\257"+
    "\55\0\1\260\20\0\24\261\1\0\21\261\1\216\1\227"+
    "\13\216\1\262\6\216\1\0\21\216\12\0\1\263\33\0"+
    "\1\154\1\165\2\154\1\264\17\154\1\0\21\154\1\155"+
    "\1\166\2\155\1\265\17\155\1\0\21\155\32\0\1\266"+
    "\13\0\1\212\1\223\14\212\1\267\5\212\1\0\21\212"+
    "\11\0\1\270\37\0\1\271\42\0\1\261\1\272\22\261"+
    "\1\0\21\261\1\216\1\227\14\216\1\273\5\216\1\0"+
    "\21\216\36\0\1\274\7\0\1\154\1\165\13\154\1\275"+
    "\6\154\1\0\21\154\1\155\1\166\22\155\1\0\1\155"+
    "\1\276\17\155\4\0\1\277\41\0\1\212\1\223\3\212"+
    "\1\300\16\212\1\0\21\212\6\0\1\301\51\0\1\302"+
    "\33\0\1\261\1\272\11\261\1\303\10\261\1\0\21\261"+
    "\1\216\1\227\3\216\1\304\16\216\1\0\21\216\4\0"+
    "\1\305\41\0\1\154\1\165\22\154\1\0\1\306\20\154"+
    "\1\155\1\166\2\155\1\307\17\155\1\0\21\155\34\0"+
    "\1\310\11\0\1\212\1\223\15\212\1\311\4\212\1\0"+
    "\21\212\4\0\1\312\77\0\1\313\7\0\1\261\1\272"+
    "\22\261\1\0\1\314\20\261\1\216\1\227\15\216\1\315"+
    "\4\216\1\0\21\216\3\0\1\316\42\0\1\154\1\165"+
    "\22\154\1\0\1\154\1\317\17\154\1\155\1\166\6\155"+
    "\1\320\13\155\1\0\21\155\15\0\1\321\30\0\1\212"+
    "\1\223\16\212\1\322\3\212\1\0\21\212\35\0\1\323"+
    "\42\0\1\324\13\0\1\261\1\272\20\261\1\325\1\261"+
    "\1\0\21\261\1\216\1\227\7\216\1\326\12\216\1\0"+
    "\21\216\7\0\1\327\36\0\1\154\1\165\21\154\1\330"+
    "\1\0\21\154\1\155\1\166\1\155\1\331\20\155\1\0"+
    "\21\155\22\0\1\332\23\0\1\212\1\223\17\212\1\333"+
    "\2\212\1\0\21\212\25\0\1\334\42\0\1\335\23\0"+
    "\1\261\1\272\1\261\1\336\20\261\1\0\21\261\1\216"+
    "\1\227\16\216\1\337\3\216\1\0\21\216\4\0\1\340"+
    "\41\0\1\154\1\165\12\154\1\341\7\154\1\0\21\154"+
    "\1\155\1\166\12\155\1\342\7\155\1\0\21\155\26\0"+
    "\1\343\17\0\1\212\1\223\3\212\1\344\16\212\1\0"+
    "\21\212\3\0\1\345\70\0\1\346\17\0\1\261\1\272"+
    "\1\347\21\261\1\0\21\261\1\216\1\227\1\350\21\216"+
    "\1\0\21\216\36\0\1\351\13\0\1\352\41\0\1\212"+
    "\1\223\2\212\1\353\17\212\1\0\21\212\12\0\1\354"+
    "\71\0\1\355\7\0\1\261\1\272\22\261\1\0\1\261"+
    "\1\356\17\261\1\216\1\227\1\216\1\357\20\216\1\0"+
    "\21\216\14\0\1\360\66\0\1\361\10\0\1\212\1\223"+
    "\20\212\1\362\1\212\1\0\21\212\36\0\1\363\23\0"+
    "\1\364\31\0\1\261\1\272\3\261\1\365\16\261\1\0"+
    "\21\261\1\216\1\227\22\216\1\0\20\216\1\366\24\367"+
    "\1\0\21\367\12\0\1\370\33\0\1\212\1\223\16\212"+
    "\1\371\3\212\1\0\21\212\32\0\1\372\13\0\24\373"+
    "\1\0\21\373\1\261\1\272\15\261\1\374\4\261\1\0"+
    "\21\261\1\216\1\227\16\216\1\375\3\216\1\0\21\216"+
    "\1\367\1\376\22\367\1\0\21\367\36\0\1\377\7\0"+
    "\1\212\1\223\21\212\1\u0100\1\0\21\212\5\0\1\u0101"+
    "\40\0\1\373\1\u0102\22\373\1\0\21\373\1\261\1\272"+
    "\22\261\1\0\2\261\1\u0103\16\261\1\216\1\227\20\216"+
    "\1\u0104\1\216\1\0\21\216\1\367\1\376\11\367\1\u0105"+
    "\10\367\1\0\21\367\22\0\1\u0106\23\0\1\212\1\223"+
    "\2\212\1\u0107\17\212\1\0\21\212\3\0\1\u0108\42\0"+
    "\1\373\1\u0102\11\373\1\u0109\10\373\1\0\21\373\1\261"+
    "\1\272\13\261\1\u010a\6\261\1\0\21\261\1\216\1\227"+
    "\2\216\1\u010b\17\216\1\0\21\216\1\367\1\376\1\u010c"+
    "\21\367\1\0\21\367\27\0\1\u010d\16\0\1\212\1\223"+
    "\12\212\1\u010e\7\212\1\0\21\212\43\0\1\u010f\2\0"+
    "\1\373\1\u0102\1\u0110\21\373\1\0\21\373\1\261\1\272"+
    "\20\261\1\u0111\1\261\1\0\21\261\1\216\1\227\12\216"+
    "\1\u0112\7\216\1\0\21\216\1\367\1\376\13\367\1\u0113"+
    "\6\367\1\0\21\367\23\0\1\u0114\33\0\1\u0115\34\0"+
    "\1\373\1\u0102\13\373\1\u0116\6\373\1\0\21\373\1\261"+
    "\1\272\1\u0117\21\261\1\0\21\261\1\367\1\376\14\367"+
    "\1\u0118\5\367\1\0\21\367\37\0\1\u0119\24\0\1\u011a"+
    "\27\0\1\373\1\u0102\14\373\1\u011b\5\373\1\0\21\373"+
    "\1\261\1\272\16\261\1\u011c\3\261\1\0\21\261\1\367"+
    "\1\376\3\367\1\u011d\16\367\1\0\21\367\40\0\1\u011e"+
    "\51\0\1\u011f\1\0\1\373\1\u0102\3\373\1\u0120\16\373"+
    "\1\0\21\373\1\261\1\272\2\261\1\u0121\17\261\1\0"+
    "\21\261\1\367\1\376\15\367\1\u0122\4\367\1\0\21\367"+
    "\41\0\1\u0123\7\0\1\u0124\42\0\1\373\1\u0102\15\373"+
    "\1\u0125\4\373\1\0\21\373\1\261\1\272\22\261\1\0"+
    "\3\261\1\u0126\15\261\1\367\1\376\20\367\1\u0127\1\367"+
    "\1\0\21\367\41\0\1\u0128\31\0\1\u0129\20\0\1\373"+
    "\1\u0102\22\373\1\0\1\373\1\u012a\17\373\1\261\1\272"+
    "\16\261\1\u012b\3\261\1\0\21\261\1\367\1\376\13\367"+
    "\1\u012c\6\367\1\0\21\367\36\0\1\u012d\31\0\1\u012e"+
    "\23\0\1\373\1\u0102\14\373\1\u012f\5\373\1\0\21\373"+
    "\1\261\1\272\1\u0130\21\261\1\0\21\261\1\367\1\376"+
    "\6\367\1\u0131\13\367\1\0\21\367\14\0\1\u0132\46\0"+
    "\1\u0133\30\0\1\373\1\u0102\1\373\1\u0134\20\373\1\0"+
    "\21\373\1\261\1\272\1\261\1\u0135\20\261\1\0\21\261"+
    "\1\367\1\376\1\367\1\u0136\20\367\1\0\21\367\24\u0137"+
    "\1\0\21\u0137\16\0\1\u0138\27\0\1\373\1\u0102\7\373"+
    "\1\u0139\12\373\1\0\21\373\1\261\1\272\12\261\1\u013a"+
    "\7\261\1\0\21\261\1\367\1\376\22\367\1\0\6\367"+
    "\1\u013b\12\367\1\u0137\1\u013c\22\u0137\1\0\21\u0137\32\0"+
    "\1\u013d\13\0\1\373\1\u0102\2\373\1\u013e\17\373\1\0"+
    "\21\373\1\367\1\376\1\367\1\u013f\20\367\1\0\21\367"+
    "\1\u0137\1\u013c\11\u0137\1\u0140\10\u0137\1\0\21\u0137\23\0"+
    "\1\u0141\22\0\1\373\1\u0102\22\373\1\0\1\373\1\u0142"+
    "\17\373\1\367\1\376\20\367\1\u0143\1\367\1\0\21\367"+
    "\1\u0137\1\u013c\1\u0144\21\u0137\1\0\21\u0137\4\0\1\u0145"+
    "\41\0\1\373\1\u0102\22\373\1\0\2\373\1\u0146\16\373"+
    "\1\367\1\376\1\u0147\21\367\1\0\21\367\1\u0137\1\u013c"+
    "\13\u0137\1\u0148\6\u0137\1\0\21\u0137\26\0\1\u0149\17\0"+
    "\1\373\1\u0102\22\373\1\0\1\373\1\u014a\17\373\1\367"+
    "\1\376\12\367\1\u014b\7\367\1\0\21\367\1\u0137\1\u013c"+
    "\14\u0137\1\u014c\5\u0137\1\0\21\u0137\15\0\1\u014d\30\0"+
    "\1\373\1\u0102\1\373\1\u014e\20\373\1\0\21\373\1\u0137"+
    "\1\u013c\3\u0137\1\u014f\16\u0137\1\0\21\u0137\11\0\1\u0150"+
    "\34\0\1\373\1\u0102\20\373\1\u0151\1\373\1\0\21\373"+
    "\1\u0137\1\u013c\15\u0137\1\u0152\4\u0137\1\0\21\u0137\36\0"+
    "\1\u0153\7\0\1\373\1\u0102\12\373\1\u0154\7\373\1\0"+
    "\21\373\1\u0137\1\u013c\6\u0137\1\u0155\13\u0137\1\0\21\u0137"+
    "\14\0\1\u0156\31\0\1\u0137\1\u013c\16\u0137\1\u0157\3\u0137"+
    "\1\0\21\u0137\24\u0158\1\0\21\u0158\1\u0137\1\u013c\7\u0137"+
    "\1\u0159\12\u0137\1\0\21\u0137\1\u0158\1\u015a\22\u0158\1\0"+
    "\21\u0158\1\u0137\1\u013c\22\u0137\1\0\4\u0137\1\u015b\14\u0137"+
    "\1\u0158\1\u015a\11\u0158\1\u015c\10\u0158\1\0\21\u0158\1\u0137"+
    "\1\u013c\22\u0137\1\0\5\u0137\1\u015d\13\u0137\1\u0158\1\u015a"+
    "\1\u015e\21\u0158\1\0\21\u0158\1\u0137\1\u013c\16\u0137\1\u015f"+
    "\3\u0137\1\0\21\u0137\1\u0158\1\u015a\13\u0158\1\u0160\6\u0158"+
    "\1\0\21\u0158\1\u0137\1\u013c\22\u0137\1\0\4\u0137\1\u0161"+
    "\14\u0137\1\u0158\1\u015a\14\u0158\1\u0162\5\u0158\1\0\21\u0158"+
    "\1\u0137\1\u013c\1\u0137\1\u0163\20\u0137\1\0\21\u0137\1\u0158"+
    "\1\u015a\3\u0158\1\u0164\16\u0158\1\0\21\u0158\1\u0137\1\u013c"+
    "\22\u0137\1\0\6\u0137\1\u0165\12\u0137\1\u0158\1\u015a\15\u0158"+
    "\1\u0166\4\u0158\1\0\21\u0158\1\u0137\1\u013c\1\u0137\1\u0167"+
    "\20\u0137\1\0\21\u0137\1\u0158\1\u015a\16\u0158\1\u0168\3\u0158"+
    "\1\0\21\u0158\1\u0137\1\u013c\20\u0137\1\u0169\1\u0137\1\0"+
    "\21\u0137\1\u0158\1\u015a\21\u0158\1\u016a\1\0\21\u0158\1\u0137"+
    "\1\u013c\1\u016b\21\u0137\1\0\21\u0137\1\u0158\1\u015a\21\u0158"+
    "\1\u016c\1\0\21\u0158\1\u0137\1\u013c\12\u0137\1\u016d\7\u0137"+
    "\1\0\21\u0137\1\u0158\1\u015a\1\u0158\1\u016e\20\u0158\1\0"+
    "\22\u0158\1\u015a\3\u0158\1\u016f\16\u0158\1\0\22\u0158\1\u015a"+
    "\3\u0158\1\u0170\16\u0158\1\0\22\u0158\1\u015a\22\u0158\1\0"+
    "\15\u0158\1\u0171\4\u0158\1\u015a\13\u0158\1\u0172\6\u0158\1\0"+
    "\22\u0158\1\u015a\7\u0158\1\u0173\12\u0158\1\0\22\u0158\1\u015a"+
    "\14\u0158\1\u0174\5\u0158\1\0\22\u0158\1\u015a\22\u0158\1\0"+
    "\1\u0158\1\u0175\20\u0158\1\u015a\2\u0158\1\u0176\17\u0158\1\0"+
    "\22\u0158\1\u015a\22\u0158\1\0\1\u0158\1\u0177\20\u0158\1\u015a"+
    "\13\u0158\1\u0178\6\u0158\1\0\22\u0158\1\u015a\7\u0158\1\u0179"+
    "\12\u0158\1\0\22\u0158\1\u015a\12\u0158\1\u017a\7\u0158\1\0"+
    "\21\u0158";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13870];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\44\0\1\11\54\0\1\11\7\0"+
    "\1\11\11\0\1\11\165\0\2\1\53\0\1\1\3\0"+
    "\1\1\47\0\1\1\20\0\1\1\10\0\1\1\30\0"+
    "\1\1\14\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private JSONObject akif ;
	private JSONArray contributors ;
	private Contributor contributor ;
	private LanguageBlocks lblocks ;
	private Expressions expressions ;
	private TokenBlock tblock ;
	private Rights rights ;
	
	// set default language to English	
	String language = "en" ;
	String text ;
	
    
    public void generate()
    {    
        generateTokenBlock() ;
        generateRights() ;
        generateContributors() ;
        generateLanguageBlocks() ;
    	generateExpressions() ;
    }

     
    @SuppressWarnings("unchecked")
    private void generateTokenBlock()
    {
		tblock = new TokenBlock() ;    
    	tblock.setAgeRange( "18-U" ) ;
    	akif.put("tokenBlock", tblock.toJSONObject() ) ;
    }
    
    @SuppressWarnings("unchecked")
    private void generateRights()
    {
    	akif.put( "rights", rights.toJSONObject() ) ;
    }
          	
    @SuppressWarnings("unchecked")
    private void generateContributors()
    {
    	akif.put("contributors", contributors ) ;
    }

    @SuppressWarnings("unchecked")
    private void generateLanguageBlocks()
    {
    	akif.put("languageBlocks", lblocks.toJSONObject() ) ;
    }

	@SuppressWarnings("unchecked")
    private void generateExpressions()
    {
    	akif.put("expressions", expressions.toJSONArray() ) ;
    }

    public String toString() 
    {
      return akif.toJSONString() ;
    }
    
	public JSONObject getAkif() {
		return akif;
	}

	@SuppressWarnings("unchecked")
	public void setSet(String set) {
		akif.put("set", set) ;
	}
	
	@SuppressWarnings("unchecked")
	public void setId(int id)
	{
		akif.put("identifier", new Integer( id ) ) ;
	}
		
	
	@SuppressWarnings("unchecked")
	public void init()
	{
		akif = new JSONObject() ;
		akif.put( "status", "published" ) ;
		akif.put( "generateThumbnail", new Boolean( true ) ) ;
		akif.put( "creationDate", utcNow() ) ;
		akif.put( "lastUpdateDate", utcNow() ) ;

	}
	
	private String utcNow() 
	{
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd" );
		return sdf.format(cal.getTime());
	}
	
	private String extract( String element )
	{	
		return element.substring(element.indexOf(">") + 1 , element.indexOf("</") );
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MODS2AKIF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MODS2AKIF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { text = extract( yytext() ).trim() ;
		try
		{
			language = Toolbox.getInstance().toISO6391( text ) ;
		}
		catch( ToolboxException tbe)
		{
			language = "en" ;
		}
		expressions.setLanguage( language ) ;
          }
        case 15: break;
        case 1: 
          { //throw new Error("Illegal character <"+ yytext()+">") ;
          }
        case 16: break;
        case 7: 
          { text = extract( yytext() ).trim() ;
		try
		{
			language = Toolbox.getInstance().detectLanguage( text ) ;
		}
		catch( ToolboxException tbe)
		{
			language = "en" ;
		}
		lblocks.setTitle( language, text ) ;
          }
        case 17: break;
        case 9: 
          { contributor.setName( extract( yytext() ).trim() ) ;
          }
        case 18: break;
        case 5: 
          { contributors.add( contributor.toJSONObject() ) ;
		yybegin( MODS ) ;
          }
        case 19: break;
        case 12: 
          { expressions.setUrl( extract( yytext() ).trim() ) ;
          }
        case 20: break;
        case 10: 
          { expressions.setMime( extract( yytext() ).trim() ) ;
          }
        case 21: break;
        case 4: 
          { yybegin( MODS ) ;
		contributors = new JSONArray() ;
		lblocks = new LanguageBlocks() ;
		expressions = new Expressions() ;
		rights = new Rights() ;
          }
        case 22: break;
        case 14: 
          { text = extract( yytext() ).trim() ;
		try
		{
			language = Toolbox.getInstance().detectLanguage( text ) ;
		}
		catch( ToolboxException tbe)
		{
			language = "en" ;
		}
		if ( "open access".equals( text ) )
		{
			rights.setDescription( "en", text ) ;
		}
		else
		{
			rights.setDescription( language, text ) ;
		}
          }
        case 23: break;
        case 2: 
          { yybegin( YYINITIAL ) ;
		generate() ;
          }
        case 24: break;
        case 11: 
          { contributor.setRole( extract( yytext() ).trim() ) ;
          }
        case 25: break;
        case 3: 
          { contributor = new Contributor() ;
		yybegin( CONTRIBUTOR ) ;
          }
        case 26: break;
        case 6: 
          { text = extract( yytext() ).trim() ;
		try
		{
			language = Toolbox.getInstance().detectLanguage( text ) ;
		}
		catch( ToolboxException tbe)
		{
			language = "en" ;
		}
		lblocks.setKeyword( language, text ) ;
          }
        case 27: break;
        case 8: 
          { text = extract( yytext() ).trim() ;
		try
		{
			language = Toolbox.getInstance().detectLanguage( text ) ;
		}
		catch( ToolboxException tbe)
		{
			language = "en" ;
		}
		lblocks.setDescription( language, text ) ;
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MODS2AKIF <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        MODS2AKIF scanner = null;
        try {
          scanner = new MODS2AKIF( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
